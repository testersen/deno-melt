name: Release
on:
  workflow_dispatch:
    inputs:
      type:
        description: What type of version increment should be done?
        default: patch
        type: choice
        options:
          - patch
          - minor
          - major
        required: true
      releaseMessage:
        description: The message to put in the release
        type: string
        required: false
permissions:
  contents: read
  actions: read
  security-events: write
jobs:
  qa:
    name: Quality Assurance
    permissions:
      contents: read
      actions: read
      security-events: write
    uses: ./.github/workflows/quality_assurance.yml
    if: github.ref == 'refs/heads/main'
  versioning:
    name: Versioning
    runs-on: ubuntu-latest
    permissions:
      contents: read
    if: github.ref == 'refs/heads/main'
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: oss-actions/auto-semver@v0
        id: version
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          type: ${{ inputs.type }}
  release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs: [qa, versioning]
    steps:
      - uses: actions/checkout@v3
      - name: Apply version ${{ needs.versioning.outputs.version }}
        env:
          VERSION: ${{ needs.versioning.outputs.version }}
        run: |
          echo "export default \"${VERSION}\";" > version.ts
          echo "" >> version.ts
      - name: Release
        env:
          VERSION: ${{ needs.versioning.outputs.version }}
          GH_TOKEN: ${{ github.token }}
          RELEASE_MESSAGE: ${{ inputs.releaseMessage }}
        run: |
          echo ".github" >> .gitignore
          echo ".gitignore" >> .gitignore
          git rm --cached `git ls-files -i -c --exclude-from=.gitignore`
          git add .
          git config user.name github-actions
          git config user.email github-actions@github.com
          git commit -m "$RELEASE_MESSAGE"
          git tag ${VERSION:1}
          git push -u origin ${VERSION:1}
          gh release create --verify-tag -t "$RELEASE_MESSAGE" ${VERSION:1}
